To use:

1. Make sure a RabbitMQ server is available.  Here that server will be
located at 127.0.0.1:5672 with username "guest" and password "guest".

2. Compile the project by running:

        $ lein deps
        $ lein uberjar

3. Modify a Clojush problem file in the following way.  Here the example will
be for the lawnmower problem included in the Clojush distribution.

The original call to pushgp is:

-  (pushgp
-    :error-function (lawnmower-fitness 5 5 100)
-    :atom-generators (list 'left 'mow 'v8a 'frog (fn [] [(rand-int 8) (rand-int 8)]))
-    :mutation-probability mutation-probability
-    :crossover-probability 0.3
-    :simplification-probability 0.3
-    :reproduction-simplifications 10
-    :max-points 200
-    :evalpush-limit 1000)

This is modified to the following.  Where params is a map of the parameters to
be used for any given run.  An example set of parameters to be used in this
case is {:name "5x5" :lawn-dimensions [5 5]} (where name is used later to
identify a run using this parameter map).  Also notice that 'examples.lawnmower
is added at the end.  This is necessary for a worker to know in which namespace
to call run.

-   (defn run [params]
-     (let [[lawn-rows lawn-cols] (params :lawn-dimensions)
-           atom-generators (params :atom-generators)
-           mutatition-probability (params :mutation-probability)]
-     (pushgp
-       :error-function (lawnmower-fitness lawn-rows lawn-cols 100)
-       :atom-generators (concat atom-generators
-                                (list (fn [] [(rand-int 8) (rand-int 8)])))
-       :mutation-probability mutation-probability
-       :crossover-probability 0.3
-       :simplification-probability 0.3
-       :reproduction-simplifications 10
-       :max-points 200
-       :evalpush-limit 1000))
-
-   'examples.lawnmower

3.  We must define the parameters to be distributed.  This is done in clojure.
As an example, to define parameters for eight runs with lawn-dimensions 5 x 5
and three runs with lawn-dimensions 8 x 4, put the following clojure code into a
file (here referred to as parameters.clj).

---parameters.clj---
(flatten (vector 
  (repeat 8 {:name "5x5"
             :lawn-dimensions [5 5]})
  (repeat 3 {:name "8x4"
             :lawn-dimensions [8 4]})))
-------------------

4. Start the workers.  On each machine run:

     $ java -jar clojush-parallel-runs.jar \
          --worker --file /home/user/lawnmower.clj --log-dir /home/user/worker-logs \
          --host 127.0.0.1 --port 5672 --user guest --pass guest

Where host, port, user, and pass pertain to the RabbitMQ server.

5. Distribute the paramaters.  On one machine (call it the head node) run:

     $ java -jar clojush-parallel-runs.jar \
          --distribute --parameters /home/user/parameters.clj \
          --host 127.0.0.1 --port 5672 --user guest --pass guest

6. The output of each run will written to the specified log directory on each
worker.  The log file name will be the value of :name given in the parameter
map followed by random digits.

Extra functionality:

Note: The return value of pushgp in the vanilla Clojush distribution is nil.  So the
following requires modification to the pushgp function in clojush.clj to be
useful.

The return values of pushgp (from each worker) are placed in a queue.  To
retreive these values and write them to a file, run the following:

     $ java -jar clojush-parallel-runs.jar \
          --output-file /home/user/head-output
          --host 127.0.0.1 --port 5672 --user guest --pass guest

This will write all messages in the reply queue to the file specified by
--output-file.

For example, if pushgp is modified to return the generation at which success
has occurred then for the parameters.clj used above, /home/user/head-output
will contain:

---head-output---
{:name 5x5, :paramaters-used {:name 5x5, :lawn-dimensions [5 5]}, :log-file 5x52734, :success-generation 3}
{:name 5x5, :paramaters-used {:name 5x5, :lawn-dimensions [5 5]}, :log-file 5x53832, :success-generation 3}
{:name 5x5, :paramaters-used {:name 5x5, :lawn-dimensions [5 5]}, :log-file 5x56526, :success-generation 5}
{:name 5x5, :paramaters-used {:name 5x5, :lawn-dimensions [5 5]}, :log-file 5x58389, :success-generation 6}
{:name 5x5, :paramaters-used {:name 5x5, :lawn-dimensions [5 5]}, :log-file 5x58456, :success-generation 5}
{:name 5x5, :paramaters-used {:name 5x5, :lawn-dimensions [5 5]}, :log-file 5x59791, :success-generation 3}
{:name 5x5, :paramaters-used {:name 5x5, :lawn-dimensions [5 5]}, :log-file 5x52346, :success-generation 4}
{:name 5x5, :paramaters-used {:name 5x5, :lawn-dimensions [5 5]}, :log-file 5x53058, :success-generation 2}
{:name 8x4, :paramaters-used {:name 8x4, :lawn-dimensions [8 4]}, :log-file 8x44598, :success-generation 11}
{:name 8x4, :paramaters-used {:name 8x4, :lawn-dimensions [8 4]}, :log-file 8x45389, :success-generation 10}
{:name 8x4, :paramaters-used {:name 8x4, :lawn-dimensions [8 4]}, :log-file 8x42195, :success-generation 9}
----------------

